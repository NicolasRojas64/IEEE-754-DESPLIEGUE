[{"C:\\Users\\NICK0\\OneDrive\\Escritorio\\Universidad\\Semestre 10\\IEEE-754-Despliegue\\src\\index.js":"1","C:\\Users\\NICK0\\OneDrive\\Escritorio\\Universidad\\Semestre 10\\IEEE-754-Despliegue\\src\\reportWebVitals.js":"2","C:\\Users\\NICK0\\OneDrive\\Escritorio\\Universidad\\Semestre 10\\IEEE-754-Despliegue\\src\\App.js":"3","C:\\Users\\NICK0\\OneDrive\\Escritorio\\Universidad\\Semestre 10\\IEEE-754-Despliegue\\src\\Conversor.jsx":"4","C:\\Users\\NICK0\\OneDrive\\Escritorio\\Universidad\\Semestre 10\\IEEE-754-Despliegue\\src\\componets\\SimpleAndDoublePrecision .jsx":"5"},{"size":552,"mtime":1666030675448,"results":"6","hashOfConfig":"7"},{"size":375,"mtime":1666030675449,"results":"8","hashOfConfig":"7"},{"size":160,"mtime":1666030675446,"results":"9","hashOfConfig":"7"},{"size":273,"mtime":1666030675446,"results":"10","hashOfConfig":"7"},{"size":13761,"mtime":1666030675447,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1dj9tvc",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},"C:\\Users\\NICK0\\OneDrive\\Escritorio\\Universidad\\Semestre 10\\IEEE-754-Despliegue\\src\\index.js",[],[],"C:\\Users\\NICK0\\OneDrive\\Escritorio\\Universidad\\Semestre 10\\IEEE-754-Despliegue\\src\\reportWebVitals.js",[],[],"C:\\Users\\NICK0\\OneDrive\\Escritorio\\Universidad\\Semestre 10\\IEEE-754-Despliegue\\src\\App.js",[],[],"C:\\Users\\NICK0\\OneDrive\\Escritorio\\Universidad\\Semestre 10\\IEEE-754-Despliegue\\src\\Conversor.jsx",[],[],"C:\\Users\\NICK0\\OneDrive\\Escritorio\\Universidad\\Semestre 10\\IEEE-754-Despliegue\\src\\componets\\SimpleAndDoublePrecision .jsx",["28","29","30"],[],"import React, { useContext, useState } from 'react'\r\nimport './SimpleAndDoublePrecision.css'\r\nexport const SimpleAndDoublePrecision  = () => {\r\n    const [number, setnumber] = useState(0)\r\n    const binaryNumber = Math.abs(number).toString(2);\r\n    const [integerPart, setintegerPart] = useState(0)\r\n    const [decimalPart, setdecimalPart] = useState(0)\r\n    const [binaryIntegerPart, setbinaryIntegerPart] = useState(1)\r\n    const [binaryDecimalPart, setbinaryDecimalPart] = useState(1)\r\n\r\n    const convertNumber=()=>{\r\n        const [integerPartSplit, decimalPartSplit] =  Math.abs(number).toString().split(\".\")\r\n        const [binaryIntegerPartSplit, binaryDecimalPartSplit] = binaryNumber.split(\".\");\r\n        setintegerPart(integerPartSplit)\r\n        setdecimalPart(decimalPartSplit)\r\n        setbinaryIntegerPart(binaryIntegerPartSplit)\r\n        setbinaryDecimalPart(binaryDecimalPartSplit)\r\n    }\r\n\r\n    const positions = () => {\r\n        let count = 0;\r\n        let binArray = binaryDecimalPart.toString().split('');\r\n        for(let i = 0; binArray[i] === \"0\";i++){\r\n            count++;\r\n        }\r\n        return count+1;\r\n    }\r\n\r\n    const  denormalize=()=>{\r\n        let corrimiento;\r\n        if(integerPart ===\"0\"){\r\n            let index = positions();\r\n            let a = binaryNumber.replace(\".\",\"\");\r\n            corrimiento = a.slice(index, index+1) + \".\" + a.slice(index+1)\r\n        }\r\n        else{\r\n            let a = binaryNumber.replace(\".\",\"\");\r\n            corrimiento = a.slice(0,1) + \".\" + a.slice(1)\r\n        }\r\n        \r\n        return corrimiento.substring(0,30);\r\n    }\r\n\r\n    const  denormalizeDouble=()=>{\r\n        let corrimiento;\r\n        if(integerPart ===\"0\"){\r\n            let index = positions();\r\n            let a = binaryNumber.replace(\".\",\"\");\r\n            corrimiento = a.slice(index, index+1) + \".\" + a.slice(index+1)\r\n        }\r\n        else{\r\n            let a = binaryNumber.replace(\".\",\"\");\r\n            corrimiento = a.slice(0,1) + \".\" + a.slice(1)\r\n        }\r\n        \r\n        return corrimiento.substring(0,60);\r\n    }\r\n\r\n    const calculateExponent =()=>{\r\n        let exp;\r\n        if(integerPart === \"0\"){\r\n            let index = positions();\r\n            exp = \"127 - \"+ index + \" = \" + (127 - index) + \" (10) --> \"+ (127 - index).toString(2) + \" (2)\";\r\n        }\r\n        else{\r\n            let index = binaryNumber.indexOf(\".\");\r\n            exp = \"127 + \"+ (index-1) + \" = \" + (127 + (index - 1)) + \" (10) --> \"+ (127 + (index - 1)).toString(2) ;\r\n        }\r\n        return exp;\r\n    }\r\n    const calculateExponentDouble =()=>{\r\n        let exp;\r\n        if(integerPart == \"0\"){\r\n            let index = positions();\r\n            exp = \"1023 - \"+ index + \" = \" + (1023 - index) + \" (10) --> \"+ (1023 - index).toString(2) + \" (2)\";\r\n        }\r\n        else{\r\n            let index = binaryNumber.indexOf(\".\");\r\n            exp = \"1023 + \"+ (index-1) + \" = \" + (1023 + (index - 1)) + \" (10) --> \"+ (1023 + (index - 1)).toString(2) + \" (2)\";\r\n        }\r\n        return exp;\r\n    }\r\n    const  exponentDouble = ()=>{\r\n        let exp;\r\n        if(integerPart == \"0\"){\r\n            let index = positions()\r\n            exp = (1023 - index).toString(2);\r\n        }else{\r\n            let index = binaryNumber.indexOf(\".\");\r\n            exp = (1023 + (index - 1)).toString(2);\r\n        }\r\n\r\n        let ceros = \"\";\r\n        if(exp.length < 11){\r\n            for(let i = 0; i < (11 - exp.length); i++){\r\n                ceros = ceros.concat(\"0\");\r\n            }\r\n            exp = ceros.concat(exp);\r\n        }\r\n        \r\n        return exp;\r\n    }\r\n\r\n    const  exponent = ()=>{\r\n        let exp;\r\n        if(integerPart === \"0\"){\r\n            let index = positions()\r\n            exp = (127 - index).toString(2);\r\n        }else{\r\n            let index = binaryNumber.indexOf(\".\");\r\n            exp = (127 + (index - 1)).toString(2);\r\n        }\r\n\r\n        let ceros = \"\";\r\n        if(exp.length < 8){\r\n            for(let i = 0; i < (8 - exp.length); i++){\r\n                ceros = ceros.concat(\"0\");\r\n            }\r\n            exp = ceros.concat(exp);\r\n        }\r\n        \r\n        return exp;\r\n    }\r\n\r\n    const sign= ()=>{\r\n        let s;\r\n        number >= 0 ? s = 0 : s = 1;\r\n        return s;\r\n   }\r\n   const mantissaDouble = () => {\r\n    let denormalized = denormalizeDouble();\r\n    let m = denormalized.slice(2);\r\n    let difference = (52 - (m.length));\r\n    if(m.length < 52){\r\n        for(let i = 0; i < difference; i++){\r\n            m+=\"0\";\r\n        }\r\n    }\r\n\r\n    if(m.length > 52){\r\n        m = m.substring(0,52)\r\n    }\r\n    return m;\r\n}\r\n\r\n   const mantissa = () => {\r\n    let denormalized = denormalize();\r\n    let m = denormalized.slice(2);\r\n    let difference = (23 - (m.length));\r\n    if(m.length < 23){\r\n        for(let i = 0; i < difference; i++){\r\n            m+=\"0\";\r\n        }\r\n    }\r\n\r\n    if(m.length > 23){\r\n        m = m.substring(0,23)\r\n    }\r\n    return m;\r\n}   \r\nconst binarylArray = () => {\r\n    let binArray = [];\r\n    let h = sign() + exponent() + mantissa();\r\n    for(let i = 0; i < 8; i++){\r\n        binArray.push(h.substring(i*4, (i*4) + 4))\r\n    }\r\n    return binArray;\r\n}\r\n\r\nconst hexadecimalArray = () =>{\r\n    let hexaArray = [];\r\n    let binArray = binarylArray();\r\n    for(let i = 0; i < binArray.length; i++){\r\n        hexaArray.push(parseInt(binArray[i], 2).toString(16).toUpperCase())\r\n    }\r\n    return hexaArray;\r\n}\r\n\r\nconst hexadecimalNumber = () => {\r\n    let hexa = \"\";\r\n    let h = hexadecimalArray();\r\n    for(let i = 0; i < h.length; i++){\r\n        hexa = hexa.concat(h[i])\r\n    }\r\n\r\n    return [...hexa];\r\n    }\r\n\r\n    const binarylArrayDouble = () => {\r\n        let binArray = [];\r\n        let h = sign() + exponentDouble() + mantissaDouble();\r\n        for(let i = 0; i < 16; i++){\r\n            binArray.push(h.substring(i*4, (i*4) + 4))\r\n        }\r\n        return binArray;\r\n    }\r\n    \r\n    const hexadecimalArrayDouble = () =>{\r\n        let hexaArray = [];\r\n        let binArray = binarylArrayDouble();\r\n        for(let i = 0; i < binArray.length; i++){\r\n            hexaArray.push(parseInt(binArray[i], 2).toString(16).toUpperCase())\r\n        }\r\n        return hexaArray;\r\n    }\r\n    \r\n    const hexadecimalNumberDouble = () => {\r\n        let hexa = \"\";\r\n        let h = hexadecimalArrayDouble();\r\n        for(let i = 0; i < h.length; i++){\r\n            hexa = hexa.concat(h[i])\r\n        }\r\n        return hexa;\r\n    }\r\n\r\n  return (\r\n    <>\r\n    <h1>CALCULADORA IEEE754</h1>\r\n    <div className='inputs'>\r\n        <input type='number' className='input-text' name='number' value={number} onChange={e => setnumber(e.target.value)}></input>\r\n        <button className='button-44' onClick={convertNumber}> Convertir </button>\r\n    </div>\r\n    <div className='conversor'>\r\n        <div className='conversor-simple'>\r\n            <h2>Presicion simple</h2>\r\n\r\n            <h3>Parte entera en binario: {'\\n' + integerPart + \" (10)\"} </h3> <h4>{binaryIntegerPart + \"(2)\"}</h4>\r\n\r\n            <h3>Parte decimal en binario:{decimalPart + \" (10)\"} </h3>\r\n            <h4>{binaryDecimalPart.length >= 0 ? binaryDecimalPart.substring(0, 30) : 0 + \" (2)\"}</h4>\r\n            <h3>Unión de parte entera(2) y parte decimal(2): </h3>\r\n            <h4>{binaryDecimalPart.length >= 0 ? binaryIntegerPart + \".\" + binaryDecimalPart.substring(0, 30) : 0}</h4>\r\n            <h3>Corrimiento hacia el uno más cercano:</h3>\r\n            <h4> {denormalize()}</h4>\r\n            <h3>Exponente en binario: </h3>\r\n            <h4>{calculateExponent()}</h4>\r\n            <h3>Conversión a presición simple (32 bits): </h3>\r\n            <h4>1</h4>\r\n            <h3>Signo: </h3>\r\n            <h4>{sign()}</h4>\r\n            <h3>Exponente: </h3>\r\n            <h4>{exponent()}</h4>\r\n            <h3>Mantisa:</h3>\r\n            <h4> {mantissa()}</h4>\r\n            <hr />\r\n            <h3 className='title'>Conversion a presicion Simple 32 Bits</h3>\r\n            <table className='customTable'>\r\n                <tr>\r\n                    <th>Signo</th>\r\n                    <th>Exponente</th>\r\n                    <th>Mantiza</th>\r\n                </tr>\r\n                <tr>\r\n                    <td>{sign()}</td>\r\n                    <td>{exponent()}</td>\r\n                    <td>{mantissa()}</td>\r\n                </tr>\r\n            </table>\r\n            <h3 className='title'>Conversion a de precision simple a hexadecimal</h3>\r\n            <table className='customTable'>\r\n                <thead>\r\n\r\n                <tr>\r\n                    <th>{binarylArray()[0]}</th>\r\n                    <th>{binarylArray()[1]}</th>\r\n                    <th>{binarylArray()[2]}</th>\r\n                    <th>{binarylArray()[3]}</th>\r\n                    <th>{binarylArray()[4]}</th>\r\n                    <th>{binarylArray()[5]}</th>\r\n                    <th>{binarylArray()[6]}</th>\r\n                    <th>{binarylArray()[7]}</th>\r\n\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n\r\n                <tr>\r\n                    <td>{hexadecimalNumber()[0]}</td>\r\n                    <td>{hexadecimalNumber()[1]}</td>\r\n                    <td>{hexadecimalNumber()[2]}</td>\r\n                    <td>{hexadecimalNumber()[3]}</td>\r\n                    <td>{hexadecimalNumber()[4]}</td>\r\n                    <td>{hexadecimalNumber()[5]}</td>\r\n                    <td>{hexadecimalNumber()[6]}</td>\r\n                    <td>{hexadecimalNumber()[7]}</td>\r\n\r\n                </tr>\r\n                </tbody>\r\n            </table>\r\n            <h3>Resultado</h3>\r\n            <h3>{hexadecimalNumber()}</h3>\r\n\r\n\r\n\r\n                </div>\r\n                <div className='conversor-doble'>\r\n                    <h2>Presicion Doble</h2>\r\n\r\n                    <h3>Parte entera en binario: {'\\n' + integerPart + \" (10)\"} </h3> <h4>{binaryIntegerPart + \" (2)\"}</h4>\r\n\r\n                    <h3>Parte decimal en binario:{decimalPart + \" (10)\"} </h3>\r\n                    <h4>{binaryDecimalPart.length >= 0 ? binaryDecimalPart.substring(0, 30) : 0 + \" (2)\"}</h4>\r\n                    <h3>Unión de parte entera(2) y parte decimal(2): </h3>\r\n                    <h4>{binaryDecimalPart.length >= 0 ? binaryIntegerPart + \".\" + binaryDecimalPart.substring(0, 30) : 0}</h4>\r\n                    <h3>Corrimiento hacia el uno más cercano:</h3>\r\n                    <h4> {denormalize()}</h4>\r\n                    <h3>Exponente en binario: </h3>\r\n                    <h4>{calculateExponentDouble()}</h4>\r\n                    <h3>Conversión a presición simple (32 bits): </h3>\r\n                    <h4>1</h4>\r\n                    <h3>Signo: </h3>\r\n                    <h4>{sign()}</h4>\r\n                    <h3>Exponente: </h3>\r\n                    <h4>{exponentDouble()}</h4>\r\n                    <h3>Mantisa:</h3>\r\n                    <h4> {mantissaDouble()}</h4>\r\n                    <hr />\r\n                    <h3 className='title'>Conversion a presicion doble 64 Bits</h3>\r\n                    <table className='customTable'>\r\n                        <tr>\r\n                            <th>Signo</th>\r\n                            <th>Exponente</th>\r\n                            <th>Mantiza</th>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>{sign()}</td>\r\n                            <td>{exponentDouble()}</td>\r\n                            <td>{mantissaDouble()}</td>\r\n                        </tr>\r\n                    </table>\r\n                    <h3 className='title'>Conversion a de precision simple a hexadecimal</h3>\r\n                    <table className='customTable'>\r\n                <thead>\r\n\r\n                <tr>\r\n                    <th>{binarylArrayDouble()[0]}</th>\r\n                    <th>{binarylArrayDouble()[1]}</th>\r\n                    <th>{binarylArrayDouble()[2]}</th>\r\n                    <th>{binarylArrayDouble()[3]}</th>\r\n                    <th>{binarylArrayDouble()[4]}</th>\r\n                    <th>{binarylArrayDouble()[5]}</th>\r\n                    <th>{binarylArrayDouble()[6]}</th>\r\n                    <th>{binarylArrayDouble()[7]}</th>\r\n                    <th>{binarylArrayDouble()[9]}</th>\r\n                    <th>{binarylArrayDouble()[10]}</th>\r\n                    <th>{binarylArrayDouble()[11]}</th>\r\n                    <th>{binarylArrayDouble()[12]}</th>\r\n                    <th>{binarylArrayDouble()[13]}</th>\r\n                    <th>{binarylArrayDouble()[14]}</th>\r\n                    <th>{binarylArrayDouble()[15]}</th>\r\n               \r\n\r\n\r\n\r\n\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n\r\n                <tr>\r\n                    <td>{hexadecimalArrayDouble()[0]}</td>\r\n                    <td>{hexadecimalArrayDouble()[1]}</td>\r\n                    <td>{hexadecimalArrayDouble()[2]}</td>\r\n                    <td>{hexadecimalArrayDouble()[3]}</td>\r\n                    <td>{hexadecimalArrayDouble()[4]}</td>\r\n                    <td>{hexadecimalArrayDouble()[5]}</td>\r\n                    <td>{hexadecimalArrayDouble()[6]}</td>\r\n                    <td>{hexadecimalArrayDouble()[8]}</td>\r\n                    <td>{hexadecimalArrayDouble()[9]}</td>\r\n                    <td>{hexadecimalArrayDouble()[10]}</td>\r\n                    <td>{hexadecimalArrayDouble()[11]}</td>\r\n                    <td>{hexadecimalArrayDouble()[12]}</td>\r\n                    <td>{hexadecimalArrayDouble()[13]}</td>\r\n                    <td>{hexadecimalArrayDouble()[14]}</td>\r\n                    <td>{hexadecimalArrayDouble()[15]}</td>\r\n\r\n\r\n\r\n                </tr>\r\n                </tbody>\r\n            </table>\r\n            <h3>Resultado</h3>\r\n            <h3>{hexadecimalNumberDouble()}</h3>\r\n\r\n\r\n\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}",{"ruleId":"31","severity":1,"message":"32","line":1,"column":17,"nodeType":"33","messageId":"34","endLine":1,"endColumn":27},{"ruleId":"35","severity":1,"message":"36","line":73,"column":24,"nodeType":"37","messageId":"38","endLine":73,"endColumn":26},{"ruleId":"35","severity":1,"message":"36","line":85,"column":24,"nodeType":"37","messageId":"38","endLine":85,"endColumn":26},"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]