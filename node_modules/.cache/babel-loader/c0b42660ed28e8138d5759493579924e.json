{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\NICK0\\\\OneDrive\\\\Escritorio\\\\Universidad\\\\Semestre 10\\\\IEEE-754-Despliegue\\\\src\\\\componets\\\\SimpleAndDoublePrecision .jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState } from 'react';\nimport './SimpleAndDoublePrecision.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const SimpleAndDoublePrecision = () => {\n  _s();\n  const [number, setnumber] = useState(0);\n  const binaryNumber = Math.abs(number).toString(2);\n  const [integerPart, setintegerPart] = useState(0);\n  const [decimalPart, setdecimalPart] = useState(0);\n  const [binaryIntegerPart, setbinaryIntegerPart] = useState(1);\n  const [binaryDecimalPart, setbinaryDecimalPart] = useState(1);\n  const convertNumber = () => {\n    const [integerPartSplit, decimalPartSplit] = Math.abs(number).toString().split(\".\");\n    const [binaryIntegerPartSplit, binaryDecimalPartSplit] = binaryNumber.split(\".\");\n    setintegerPart(integerPartSplit);\n    setdecimalPart(decimalPartSplit);\n    setbinaryIntegerPart(binaryIntegerPartSplit);\n    setbinaryDecimalPart(binaryDecimalPartSplit);\n  };\n  const positions = () => {\n    let count = 0;\n    let binArray = binaryDecimalPart.toString().split('');\n    for (let i = 0; binArray[i] === \"0\"; i++) {\n      count++;\n    }\n    return count + 1;\n  };\n  const denormalize = () => {\n    let corrimiento;\n    if (integerPart === \"0\") {\n      let index = positions();\n      let a = binaryNumber.replace(\".\", \"\");\n      corrimiento = a.slice(index, index + 1) + \".\" + a.slice(index + 1);\n    } else {\n      let a = binaryNumber.replace(\".\", \"\");\n      corrimiento = a.slice(0, 1) + \".\" + a.slice(1);\n    }\n    return corrimiento.substring(0, 30);\n  };\n  const denormalizeDouble = () => {\n    let corrimiento;\n    if (integerPart === \"0\") {\n      let index = positions();\n      let a = binaryNumber.replace(\".\", \"\");\n      corrimiento = a.slice(index, index + 1) + \".\" + a.slice(index + 1);\n    } else {\n      let a = binaryNumber.replace(\".\", \"\");\n      corrimiento = a.slice(0, 1) + \".\" + a.slice(1);\n    }\n    return corrimiento.substring(0, 60);\n  };\n  const calculateExponent = () => {\n    let exp;\n    if (integerPart === \"0\") {\n      let index = positions();\n      exp = \"127 - \" + index + \" = \" + (127 - index) + \" (10) --> \" + (127 - index).toString(2) + \" (2)\";\n    } else {\n      let index = binaryNumber.indexOf(\".\");\n      exp = \"127 + \" + (index - 1) + \" = \" + (127 + (index - 1)) + \" (10) --> \" + (127 + (index - 1)).toString(2);\n    }\n    return exp;\n  };\n  const calculateExponentDouble = () => {\n    let exp;\n    if (integerPart == \"0\") {\n      let index = positions();\n      exp = \"1023 - \" + index + \" = \" + (1023 - index) + \" (10) --> \" + (1023 - index).toString(2) + \" (2)\";\n    } else {\n      let index = binaryNumber.indexOf(\".\");\n      exp = \"1023 + \" + (index - 1) + \" = \" + (1023 + (index - 1)) + \" (10) --> \" + (1023 + (index - 1)).toString(2) + \" (2)\";\n    }\n    return exp;\n  };\n  const exponentDouble = () => {\n    let exp;\n    if (integerPart == \"0\") {\n      let index = positions();\n      exp = (1023 - index).toString(2);\n    } else {\n      let index = binaryNumber.indexOf(\".\");\n      exp = (1023 + (index - 1)).toString(2);\n    }\n    let ceros = \"\";\n    if (exp.length < 11) {\n      for (let i = 0; i < 11 - exp.length; i++) {\n        ceros = ceros.concat(\"0\");\n      }\n      exp = ceros.concat(exp);\n    }\n    return exp;\n  };\n  const exponent = () => {\n    let exp;\n    if (integerPart === \"0\") {\n      let index = positions();\n      exp = (127 - index).toString(2);\n    } else {\n      let index = binaryNumber.indexOf(\".\");\n      exp = (127 + (index - 1)).toString(2);\n    }\n    let ceros = \"\";\n    if (exp.length < 8) {\n      for (let i = 0; i < 8 - exp.length; i++) {\n        ceros = ceros.concat(\"0\");\n      }\n      exp = ceros.concat(exp);\n    }\n    return exp;\n  };\n  const sign = () => {\n    let s;\n    number >= 0 ? s = 0 : s = 1;\n    return s;\n  };\n  const mantissaDouble = () => {\n    let denormalized = denormalizeDouble();\n    let m = denormalized.slice(2);\n    let difference = 52 - m.length;\n    if (m.length < 52) {\n      for (let i = 0; i < difference; i++) {\n        m += \"0\";\n      }\n    }\n    if (m.length > 52) {\n      m = m.substring(0, 52);\n    }\n    return m;\n  };\n  const mantissa = () => {\n    let denormalized = denormalize();\n    let m = denormalized.slice(2);\n    let difference = 23 - m.length;\n    if (m.length < 23) {\n      for (let i = 0; i < difference; i++) {\n        m += \"0\";\n      }\n    }\n    if (m.length > 23) {\n      m = m.substring(0, 23);\n    }\n    return m;\n  };\n  const binarylArray = () => {\n    let binArray = [];\n    let h = sign() + exponent() + mantissa();\n    for (let i = 0; i < 8; i++) {\n      binArray.push(h.substring(i * 4, i * 4 + 4));\n    }\n    return binArray;\n  };\n  const hexadecimalArray = () => {\n    let hexaArray = [];\n    let binArray = binarylArray();\n    for (let i = 0; i < binArray.length; i++) {\n      hexaArray.push(parseInt(binArray[i], 2).toString(16).toUpperCase());\n    }\n    return hexaArray;\n  };\n  const hexadecimalNumber = () => {\n    let hexa = \"\";\n    let h = hexadecimalArray();\n    for (let i = 0; i < h.length; i++) {\n      hexa = hexa.concat(h[i]);\n    }\n    return [...hexa];\n  };\n  const binarylArrayDouble = () => {\n    let binArray = [];\n    let h = sign() + exponentDouble() + mantissaDouble();\n    for (let i = 0; i < 16; i++) {\n      binArray.push(h.substring(i * 4, i * 4 + 4));\n    }\n    return binArray;\n  };\n  const hexadecimalArrayDouble = () => {\n    let hexaArray = [];\n    let binArray = binarylArrayDouble();\n    for (let i = 0; i < binArray.length; i++) {\n      hexaArray.push(parseInt(binArray[i], 2).toString(16).toUpperCase());\n    }\n    return hexaArray;\n  };\n  const hexadecimalNumberDouble = () => {\n    let hexa = \"\";\n    let h = hexadecimalArrayDouble();\n    for (let i = 0; i < h.length; i++) {\n      hexa = hexa.concat(h[i]);\n    }\n    return hexa;\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"CALCULADORA IEEE754\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inputs\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        className: \"input-text\",\n        name: \"number\",\n        value: number,\n        onChange: e => setnumber(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button-44\",\n        onClick: convertNumber,\n        children: \" Convertir \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"conversor\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"conversor-simple\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Presicion simple\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Parte entera en binario: \", '\\n' + integerPart + \" (10)\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: binaryIntegerPart + \"(2)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 79\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Parte decimal en binario:\", decimalPart + \" (10)\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: binaryDecimalPart.length >= 0 ? binaryDecimalPart.substring(0, 30) : 0 + \" (2)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Uni\\xF3n de parte entera(2) y parte decimal(2): \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: binaryDecimalPart.length >= 0 ? binaryIntegerPart + \".\" + binaryDecimalPart.substring(0, 30) : 0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Corrimiento hacia el uno m\\xE1s cercano:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\" \", denormalize()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Exponente en binario: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: calculateExponent()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Conversi\\xF3n a presici\\xF3n simple (32 bits): \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Signo: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: sign()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Exponente: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: exponent()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Mantisa:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\" \", mantissa()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"title\",\n          children: \"Conversion a presicion Simple 32 Bits\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"customTable\",\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Signo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Exponente\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Mantiza\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: sign()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: exponent()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: mantissa()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"title\",\n          children: \"Conversion a de precision simple a hexadecimal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"customTable\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: binarylArray()[0]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: binarylArray()[1]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: binarylArray()[2]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 266,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: binarylArray()[3]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: binarylArray()[4]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: binarylArray()[5]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 269,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: binarylArray()[6]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: binarylArray()[7]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 271,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: hexadecimalNumber()[0]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: hexadecimalNumber()[1]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 279,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: hexadecimalNumber()[2]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: hexadecimalNumber()[3]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 281,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: hexadecimalNumber()[4]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 282,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: hexadecimalNumber()[5]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 283,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: hexadecimalNumber()[6]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 284,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: hexadecimalNumber()[7]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 285,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Resultado\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: hexadecimalNumber()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"conversor-doble\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Presicion Doble\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Parte entera en binario: \", '\\n' + integerPart + \" (10)\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 21\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: binaryIntegerPart + \" (2)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 87\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Parte decimal en binario:\", decimalPart + \" (10)\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: binaryDecimalPart.length >= 0 ? binaryDecimalPart.substring(0, 30) : 0 + \" (2)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Uni\\xF3n de parte entera(2) y parte decimal(2): \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: binaryDecimalPart.length >= 0 ? binaryIntegerPart + \".\" + binaryDecimalPart.substring(0, 30) : 0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Corrimiento hacia el uno m\\xE1s cercano:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\" \", denormalize()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Exponente en binario: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: calculateExponentDouble()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Conversi\\xF3n a presici\\xF3n simple (32 bits): \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Signo: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: sign()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Exponente: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: exponentDouble()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Mantisa:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\" \", mantissaDouble()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"title\",\n          children: \"Conversion a presicion doble 64 Bits\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"customTable\",\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Signo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Exponente\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Mantiza\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: sign()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: exponentDouble()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: mantissaDouble()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"title\",\n          children: \"Conversion a de precision simple a hexadecimal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"customTable\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: binarylArrayDouble()[0]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 336,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: binarylArrayDouble()[1]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 337,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: binarylArrayDouble()[2]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 338,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: binarylArrayDouble()[3]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 339,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: binarylArrayDouble()[4]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 340,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: binarylArrayDouble()[5]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 341,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: binarylArrayDouble()[6]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 342,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: binarylArrayDouble()[7]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 343,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: binarylArrayDouble()[9]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 344,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: binarylArrayDouble()[10]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 345,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: binarylArrayDouble()[11]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 346,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: binarylArrayDouble()[12]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 347,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: binarylArrayDouble()[13]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 348,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: binarylArrayDouble()[14]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 349,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: binarylArrayDouble()[15]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 350,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: hexadecimalArrayDouble()[0]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 361,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: hexadecimalArrayDouble()[1]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 362,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: hexadecimalArrayDouble()[2]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 363,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: hexadecimalArrayDouble()[3]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 364,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: hexadecimalArrayDouble()[4]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 365,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: hexadecimalArrayDouble()[5]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 366,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: hexadecimalArrayDouble()[6]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 367,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: hexadecimalArrayDouble()[8]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 368,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: hexadecimalArrayDouble()[9]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 369,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: hexadecimalArrayDouble()[10]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 370,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: hexadecimalArrayDouble()[11]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 371,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: hexadecimalArrayDouble()[12]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 372,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: hexadecimalArrayDouble()[13]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 373,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: hexadecimalArrayDouble()[14]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 374,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: hexadecimalArrayDouble()[15]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 375,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Resultado\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: hexadecimalNumberDouble()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n_s(SimpleAndDoublePrecision, \"HEeqqyAqn30P8Jy09ZntISEPk3s=\");\n_c = SimpleAndDoublePrecision;\nvar _c;\n$RefreshReg$(_c, \"SimpleAndDoublePrecision\");","map":{"version":3,"names":["React","useContext","useState","SimpleAndDoublePrecision","number","setnumber","binaryNumber","Math","abs","toString","integerPart","setintegerPart","decimalPart","setdecimalPart","binaryIntegerPart","setbinaryIntegerPart","binaryDecimalPart","setbinaryDecimalPart","convertNumber","integerPartSplit","decimalPartSplit","split","binaryIntegerPartSplit","binaryDecimalPartSplit","positions","count","binArray","i","denormalize","corrimiento","index","a","replace","slice","substring","denormalizeDouble","calculateExponent","exp","indexOf","calculateExponentDouble","exponentDouble","ceros","length","concat","exponent","sign","s","mantissaDouble","denormalized","m","difference","mantissa","binarylArray","h","push","hexadecimalArray","hexaArray","parseInt","toUpperCase","hexadecimalNumber","hexa","binarylArrayDouble","hexadecimalArrayDouble","hexadecimalNumberDouble","e","target","value"],"sources":["C:/Users/NICK0/OneDrive/Escritorio/Universidad/Semestre 10/IEEE-754-Despliegue/src/componets/SimpleAndDoublePrecision .jsx"],"sourcesContent":["import React, { useContext, useState } from 'react'\r\nimport './SimpleAndDoublePrecision.css'\r\nexport const SimpleAndDoublePrecision  = () => {\r\n    const [number, setnumber] = useState(0)\r\n    const binaryNumber = Math.abs(number).toString(2);\r\n    const [integerPart, setintegerPart] = useState(0)\r\n    const [decimalPart, setdecimalPart] = useState(0)\r\n    const [binaryIntegerPart, setbinaryIntegerPart] = useState(1)\r\n    const [binaryDecimalPart, setbinaryDecimalPart] = useState(1)\r\n\r\n    const convertNumber=()=>{\r\n        const [integerPartSplit, decimalPartSplit] =  Math.abs(number).toString().split(\".\")\r\n        const [binaryIntegerPartSplit, binaryDecimalPartSplit] = binaryNumber.split(\".\");\r\n        setintegerPart(integerPartSplit)\r\n        setdecimalPart(decimalPartSplit)\r\n        setbinaryIntegerPart(binaryIntegerPartSplit)\r\n        setbinaryDecimalPart(binaryDecimalPartSplit)\r\n    }\r\n\r\n    const positions = () => {\r\n        let count = 0;\r\n        let binArray = binaryDecimalPart.toString().split('');\r\n        for(let i = 0; binArray[i] === \"0\";i++){\r\n            count++;\r\n        }\r\n        return count+1;\r\n    }\r\n\r\n    const  denormalize=()=>{\r\n        let corrimiento;\r\n        if(integerPart ===\"0\"){\r\n            let index = positions();\r\n            let a = binaryNumber.replace(\".\",\"\");\r\n            corrimiento = a.slice(index, index+1) + \".\" + a.slice(index+1)\r\n        }\r\n        else{\r\n            let a = binaryNumber.replace(\".\",\"\");\r\n            corrimiento = a.slice(0,1) + \".\" + a.slice(1)\r\n        }\r\n        \r\n        return corrimiento.substring(0,30);\r\n    }\r\n\r\n    const  denormalizeDouble=()=>{\r\n        let corrimiento;\r\n        if(integerPart ===\"0\"){\r\n            let index = positions();\r\n            let a = binaryNumber.replace(\".\",\"\");\r\n            corrimiento = a.slice(index, index+1) + \".\" + a.slice(index+1)\r\n        }\r\n        else{\r\n            let a = binaryNumber.replace(\".\",\"\");\r\n            corrimiento = a.slice(0,1) + \".\" + a.slice(1)\r\n        }\r\n        \r\n        return corrimiento.substring(0,60);\r\n    }\r\n\r\n    const calculateExponent =()=>{\r\n        let exp;\r\n        if(integerPart === \"0\"){\r\n            let index = positions();\r\n            exp = \"127 - \"+ index + \" = \" + (127 - index) + \" (10) --> \"+ (127 - index).toString(2) + \" (2)\";\r\n        }\r\n        else{\r\n            let index = binaryNumber.indexOf(\".\");\r\n            exp = \"127 + \"+ (index-1) + \" = \" + (127 + (index - 1)) + \" (10) --> \"+ (127 + (index - 1)).toString(2) ;\r\n        }\r\n        return exp;\r\n    }\r\n    const calculateExponentDouble =()=>{\r\n        let exp;\r\n        if(integerPart == \"0\"){\r\n            let index = positions();\r\n            exp = \"1023 - \"+ index + \" = \" + (1023 - index) + \" (10) --> \"+ (1023 - index).toString(2) + \" (2)\";\r\n        }\r\n        else{\r\n            let index = binaryNumber.indexOf(\".\");\r\n            exp = \"1023 + \"+ (index-1) + \" = \" + (1023 + (index - 1)) + \" (10) --> \"+ (1023 + (index - 1)).toString(2) + \" (2)\";\r\n        }\r\n        return exp;\r\n    }\r\n    const  exponentDouble = ()=>{\r\n        let exp;\r\n        if(integerPart == \"0\"){\r\n            let index = positions()\r\n            exp = (1023 - index).toString(2);\r\n        }else{\r\n            let index = binaryNumber.indexOf(\".\");\r\n            exp = (1023 + (index - 1)).toString(2);\r\n        }\r\n\r\n        let ceros = \"\";\r\n        if(exp.length < 11){\r\n            for(let i = 0; i < (11 - exp.length); i++){\r\n                ceros = ceros.concat(\"0\");\r\n            }\r\n            exp = ceros.concat(exp);\r\n        }\r\n        \r\n        return exp;\r\n    }\r\n\r\n    const  exponent = ()=>{\r\n        let exp;\r\n        if(integerPart === \"0\"){\r\n            let index = positions()\r\n            exp = (127 - index).toString(2);\r\n        }else{\r\n            let index = binaryNumber.indexOf(\".\");\r\n            exp = (127 + (index - 1)).toString(2);\r\n        }\r\n\r\n        let ceros = \"\";\r\n        if(exp.length < 8){\r\n            for(let i = 0; i < (8 - exp.length); i++){\r\n                ceros = ceros.concat(\"0\");\r\n            }\r\n            exp = ceros.concat(exp);\r\n        }\r\n        \r\n        return exp;\r\n    }\r\n\r\n    const sign= ()=>{\r\n        let s;\r\n        number >= 0 ? s = 0 : s = 1;\r\n        return s;\r\n   }\r\n   const mantissaDouble = () => {\r\n    let denormalized = denormalizeDouble();\r\n    let m = denormalized.slice(2);\r\n    let difference = (52 - (m.length));\r\n    if(m.length < 52){\r\n        for(let i = 0; i < difference; i++){\r\n            m+=\"0\";\r\n        }\r\n    }\r\n\r\n    if(m.length > 52){\r\n        m = m.substring(0,52)\r\n    }\r\n    return m;\r\n}\r\n\r\n   const mantissa = () => {\r\n    let denormalized = denormalize();\r\n    let m = denormalized.slice(2);\r\n    let difference = (23 - (m.length));\r\n    if(m.length < 23){\r\n        for(let i = 0; i < difference; i++){\r\n            m+=\"0\";\r\n        }\r\n    }\r\n\r\n    if(m.length > 23){\r\n        m = m.substring(0,23)\r\n    }\r\n    return m;\r\n}   \r\nconst binarylArray = () => {\r\n    let binArray = [];\r\n    let h = sign() + exponent() + mantissa();\r\n    for(let i = 0; i < 8; i++){\r\n        binArray.push(h.substring(i*4, (i*4) + 4))\r\n    }\r\n    return binArray;\r\n}\r\n\r\nconst hexadecimalArray = () =>{\r\n    let hexaArray = [];\r\n    let binArray = binarylArray();\r\n    for(let i = 0; i < binArray.length; i++){\r\n        hexaArray.push(parseInt(binArray[i], 2).toString(16).toUpperCase())\r\n    }\r\n    return hexaArray;\r\n}\r\n\r\nconst hexadecimalNumber = () => {\r\n    let hexa = \"\";\r\n    let h = hexadecimalArray();\r\n    for(let i = 0; i < h.length; i++){\r\n        hexa = hexa.concat(h[i])\r\n    }\r\n\r\n    return [...hexa];\r\n    }\r\n\r\n    const binarylArrayDouble = () => {\r\n        let binArray = [];\r\n        let h = sign() + exponentDouble() + mantissaDouble();\r\n        for(let i = 0; i < 16; i++){\r\n            binArray.push(h.substring(i*4, (i*4) + 4))\r\n        }\r\n        return binArray;\r\n    }\r\n    \r\n    const hexadecimalArrayDouble = () =>{\r\n        let hexaArray = [];\r\n        let binArray = binarylArrayDouble();\r\n        for(let i = 0; i < binArray.length; i++){\r\n            hexaArray.push(parseInt(binArray[i], 2).toString(16).toUpperCase())\r\n        }\r\n        return hexaArray;\r\n    }\r\n    \r\n    const hexadecimalNumberDouble = () => {\r\n        let hexa = \"\";\r\n        let h = hexadecimalArrayDouble();\r\n        for(let i = 0; i < h.length; i++){\r\n            hexa = hexa.concat(h[i])\r\n        }\r\n        return hexa;\r\n    }\r\n\r\n  return (\r\n    <>\r\n    <h1>CALCULADORA IEEE754</h1>\r\n    <div className='inputs'>\r\n        <input type='number' className='input-text' name='number' value={number} onChange={e => setnumber(e.target.value)}></input>\r\n        <button className='button-44' onClick={convertNumber}> Convertir </button>\r\n    </div>\r\n    <div className='conversor'>\r\n        <div className='conversor-simple'>\r\n            <h2>Presicion simple</h2>\r\n\r\n            <h3>Parte entera en binario: {'\\n' + integerPart + \" (10)\"} </h3> <h4>{binaryIntegerPart + \"(2)\"}</h4>\r\n\r\n            <h3>Parte decimal en binario:{decimalPart + \" (10)\"} </h3>\r\n            <h4>{binaryDecimalPart.length >= 0 ? binaryDecimalPart.substring(0, 30) : 0 + \" (2)\"}</h4>\r\n            <h3>Unión de parte entera(2) y parte decimal(2): </h3>\r\n            <h4>{binaryDecimalPart.length >= 0 ? binaryIntegerPart + \".\" + binaryDecimalPart.substring(0, 30) : 0}</h4>\r\n            <h3>Corrimiento hacia el uno más cercano:</h3>\r\n            <h4> {denormalize()}</h4>\r\n            <h3>Exponente en binario: </h3>\r\n            <h4>{calculateExponent()}</h4>\r\n            <h3>Conversión a presición simple (32 bits): </h3>\r\n            <h4>1</h4>\r\n            <h3>Signo: </h3>\r\n            <h4>{sign()}</h4>\r\n            <h3>Exponente: </h3>\r\n            <h4>{exponent()}</h4>\r\n            <h3>Mantisa:</h3>\r\n            <h4> {mantissa()}</h4>\r\n            <hr />\r\n            <h3 className='title'>Conversion a presicion Simple 32 Bits</h3>\r\n            <table className='customTable'>\r\n                <tr>\r\n                    <th>Signo</th>\r\n                    <th>Exponente</th>\r\n                    <th>Mantiza</th>\r\n                </tr>\r\n                <tr>\r\n                    <td>{sign()}</td>\r\n                    <td>{exponent()}</td>\r\n                    <td>{mantissa()}</td>\r\n                </tr>\r\n            </table>\r\n            <h3 className='title'>Conversion a de precision simple a hexadecimal</h3>\r\n            <table className='customTable'>\r\n                <thead>\r\n\r\n                <tr>\r\n                    <th>{binarylArray()[0]}</th>\r\n                    <th>{binarylArray()[1]}</th>\r\n                    <th>{binarylArray()[2]}</th>\r\n                    <th>{binarylArray()[3]}</th>\r\n                    <th>{binarylArray()[4]}</th>\r\n                    <th>{binarylArray()[5]}</th>\r\n                    <th>{binarylArray()[6]}</th>\r\n                    <th>{binarylArray()[7]}</th>\r\n\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n\r\n                <tr>\r\n                    <td>{hexadecimalNumber()[0]}</td>\r\n                    <td>{hexadecimalNumber()[1]}</td>\r\n                    <td>{hexadecimalNumber()[2]}</td>\r\n                    <td>{hexadecimalNumber()[3]}</td>\r\n                    <td>{hexadecimalNumber()[4]}</td>\r\n                    <td>{hexadecimalNumber()[5]}</td>\r\n                    <td>{hexadecimalNumber()[6]}</td>\r\n                    <td>{hexadecimalNumber()[7]}</td>\r\n\r\n                </tr>\r\n                </tbody>\r\n            </table>\r\n            <h3>Resultado</h3>\r\n            <h3>{hexadecimalNumber()}</h3>\r\n\r\n\r\n\r\n                </div>\r\n                <div className='conversor-doble'>\r\n                    <h2>Presicion Doble</h2>\r\n\r\n                    <h3>Parte entera en binario: {'\\n' + integerPart + \" (10)\"} </h3> <h4>{binaryIntegerPart + \" (2)\"}</h4>\r\n\r\n                    <h3>Parte decimal en binario:{decimalPart + \" (10)\"} </h3>\r\n                    <h4>{binaryDecimalPart.length >= 0 ? binaryDecimalPart.substring(0, 30) : 0 + \" (2)\"}</h4>\r\n                    <h3>Unión de parte entera(2) y parte decimal(2): </h3>\r\n                    <h4>{binaryDecimalPart.length >= 0 ? binaryIntegerPart + \".\" + binaryDecimalPart.substring(0, 30) : 0}</h4>\r\n                    <h3>Corrimiento hacia el uno más cercano:</h3>\r\n                    <h4> {denormalize()}</h4>\r\n                    <h3>Exponente en binario: </h3>\r\n                    <h4>{calculateExponentDouble()}</h4>\r\n                    <h3>Conversión a presición simple (32 bits): </h3>\r\n                    <h4>1</h4>\r\n                    <h3>Signo: </h3>\r\n                    <h4>{sign()}</h4>\r\n                    <h3>Exponente: </h3>\r\n                    <h4>{exponentDouble()}</h4>\r\n                    <h3>Mantisa:</h3>\r\n                    <h4> {mantissaDouble()}</h4>\r\n                    <hr />\r\n                    <h3 className='title'>Conversion a presicion doble 64 Bits</h3>\r\n                    <table className='customTable'>\r\n                        <tr>\r\n                            <th>Signo</th>\r\n                            <th>Exponente</th>\r\n                            <th>Mantiza</th>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>{sign()}</td>\r\n                            <td>{exponentDouble()}</td>\r\n                            <td>{mantissaDouble()}</td>\r\n                        </tr>\r\n                    </table>\r\n                    <h3 className='title'>Conversion a de precision simple a hexadecimal</h3>\r\n                    <table className='customTable'>\r\n                <thead>\r\n\r\n                <tr>\r\n                    <th>{binarylArrayDouble()[0]}</th>\r\n                    <th>{binarylArrayDouble()[1]}</th>\r\n                    <th>{binarylArrayDouble()[2]}</th>\r\n                    <th>{binarylArrayDouble()[3]}</th>\r\n                    <th>{binarylArrayDouble()[4]}</th>\r\n                    <th>{binarylArrayDouble()[5]}</th>\r\n                    <th>{binarylArrayDouble()[6]}</th>\r\n                    <th>{binarylArrayDouble()[7]}</th>\r\n                    <th>{binarylArrayDouble()[9]}</th>\r\n                    <th>{binarylArrayDouble()[10]}</th>\r\n                    <th>{binarylArrayDouble()[11]}</th>\r\n                    <th>{binarylArrayDouble()[12]}</th>\r\n                    <th>{binarylArrayDouble()[13]}</th>\r\n                    <th>{binarylArrayDouble()[14]}</th>\r\n                    <th>{binarylArrayDouble()[15]}</th>\r\n               \r\n\r\n\r\n\r\n\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n\r\n                <tr>\r\n                    <td>{hexadecimalArrayDouble()[0]}</td>\r\n                    <td>{hexadecimalArrayDouble()[1]}</td>\r\n                    <td>{hexadecimalArrayDouble()[2]}</td>\r\n                    <td>{hexadecimalArrayDouble()[3]}</td>\r\n                    <td>{hexadecimalArrayDouble()[4]}</td>\r\n                    <td>{hexadecimalArrayDouble()[5]}</td>\r\n                    <td>{hexadecimalArrayDouble()[6]}</td>\r\n                    <td>{hexadecimalArrayDouble()[8]}</td>\r\n                    <td>{hexadecimalArrayDouble()[9]}</td>\r\n                    <td>{hexadecimalArrayDouble()[10]}</td>\r\n                    <td>{hexadecimalArrayDouble()[11]}</td>\r\n                    <td>{hexadecimalArrayDouble()[12]}</td>\r\n                    <td>{hexadecimalArrayDouble()[13]}</td>\r\n                    <td>{hexadecimalArrayDouble()[14]}</td>\r\n                    <td>{hexadecimalArrayDouble()[15]}</td>\r\n\r\n\r\n\r\n                </tr>\r\n                </tbody>\r\n            </table>\r\n            <h3>Resultado</h3>\r\n            <h3>{hexadecimalNumberDouble()}</h3>\r\n\r\n\r\n\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}