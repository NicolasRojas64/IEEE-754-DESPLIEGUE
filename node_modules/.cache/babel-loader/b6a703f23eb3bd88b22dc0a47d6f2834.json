{"ast":null,"code":"import _toConsumableArray from\"C:/Users/NICK0/OneDrive/Escritorio/Universidad/Semestre 10/IEEE-754-Despliegue/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"C:/Users/NICK0/OneDrive/Escritorio/Universidad/Semestre 10/IEEE-754-Despliegue/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useContext,useState}from'react';import'./SimpleAndDoublePrecision.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export var SimpleAndDoublePrecision=function SimpleAndDoublePrecision(){var _useState=useState(0),_useState2=_slicedToArray(_useState,2),number=_useState2[0],setnumber=_useState2[1];var binaryNumber=Math.abs(number).toString(2);var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),integerPart=_useState4[0],setintegerPart=_useState4[1];var _useState5=useState(0),_useState6=_slicedToArray(_useState5,2),decimalPart=_useState6[0],setdecimalPart=_useState6[1];var _useState7=useState(1),_useState8=_slicedToArray(_useState7,2),binaryIntegerPart=_useState8[0],setbinaryIntegerPart=_useState8[1];var _useState9=useState(1),_useState10=_slicedToArray(_useState9,2),binaryDecimalPart=_useState10[0],setbinaryDecimalPart=_useState10[1];var convertNumber=function convertNumber(){var _Math$abs$toString$sp=Math.abs(number).toString().split(\".\"),_Math$abs$toString$sp2=_slicedToArray(_Math$abs$toString$sp,2),integerPartSplit=_Math$abs$toString$sp2[0],decimalPartSplit=_Math$abs$toString$sp2[1];var _binaryNumber$split=binaryNumber.split(\".\"),_binaryNumber$split2=_slicedToArray(_binaryNumber$split,2),binaryIntegerPartSplit=_binaryNumber$split2[0],binaryDecimalPartSplit=_binaryNumber$split2[1];setintegerPart(integerPartSplit);setdecimalPart(decimalPartSplit);setbinaryIntegerPart(binaryIntegerPartSplit);setbinaryDecimalPart(binaryDecimalPartSplit);};var positions=function positions(){var count=0;var binArray=binaryDecimalPart.toString().split('');for(var i=0;binArray[i]===\"0\";i++){count++;}return count+1;};var denormalize=function denormalize(){var corrimiento;if(integerPart===\"0\"){var index=positions();var a=binaryNumber.replace(\".\",\"\");corrimiento=a.slice(index,index+1)+\".\"+a.slice(index+1);}else{var _a=binaryNumber.replace(\".\",\"\");corrimiento=_a.slice(0,1)+\".\"+_a.slice(1);}return corrimiento.substring(0,30);};var denormalizeDouble=function denormalizeDouble(){var corrimiento;if(integerPart===\"0\"){var index=positions();var a=binaryNumber.replace(\".\",\"\");corrimiento=a.slice(index,index+1)+\".\"+a.slice(index+1);}else{var _a2=binaryNumber.replace(\".\",\"\");corrimiento=_a2.slice(0,1)+\".\"+_a2.slice(1);}return corrimiento.substring(0,60);};var calculateExponent=function calculateExponent(){var exp;if(integerPart===\"0\"){var index=positions();exp=\"127 - \"+index+\" = \"+(127-index)+\" (10) --> \"+(127-index).toString(2)+\" (2)\";}else{var _index=binaryNumber.indexOf(\".\");exp=\"127 + \"+(_index-1)+\" = \"+(127+(_index-1))+\" (10) --> \"+(127+(_index-1)).toString(2);}return exp;};var calculateExponentDouble=function calculateExponentDouble(){var exp;if(integerPart==\"0\"){var index=positions();exp=\"1023 - \"+index+\" = \"+(1023-index)+\" (10) --> \"+(1023-index).toString(2)+\" (2)\";}else{var _index2=binaryNumber.indexOf(\".\");exp=\"1023 + \"+(_index2-1)+\" = \"+(1023+(_index2-1))+\" (10) --> \"+(1023+(_index2-1)).toString(2)+\" (2)\";}return exp;};var exponentDouble=function exponentDouble(){var exp;if(integerPart==\"0\"){var index=positions();exp=(1023-index).toString(2);}else{var _index3=binaryNumber.indexOf(\".\");exp=(1023+(_index3-1)).toString(2);}var ceros=\"\";if(exp.length<11){for(var i=0;i<11-exp.length;i++){ceros=ceros.concat(\"0\");}exp=ceros.concat(exp);}return exp;};var exponent=function exponent(){var exp;if(integerPart===\"0\"){var index=positions();exp=(127-index).toString(2);}else{var _index4=binaryNumber.indexOf(\".\");exp=(127+(_index4-1)).toString(2);}var ceros=\"\";if(exp.length<8){for(var i=0;i<8-exp.length;i++){ceros=ceros.concat(\"0\");}exp=ceros.concat(exp);}return exp;};var sign=function sign(){var s;number>=0?s=0:s=1;return s;};var mantissaDouble=function mantissaDouble(){var denormalized=denormalizeDouble();var m=denormalized.slice(2);var difference=52-m.length;if(m.length<52){for(var i=0;i<difference;i++){m+=\"0\";}}if(m.length>52){m=m.substring(0,52);}return m;};var mantissa=function mantissa(){var denormalized=denormalize();var m=denormalized.slice(2);var difference=23-m.length;if(m.length<23){for(var i=0;i<difference;i++){m+=\"0\";}}if(m.length>23){m=m.substring(0,23);}return m;};var binarylArray=function binarylArray(){var binArray=[];var h=sign()+exponent()+mantissa();for(var i=0;i<8;i++){binArray.push(h.substring(i*4,i*4+4));}return binArray;};var hexadecimalArray=function hexadecimalArray(){var hexaArray=[];var binArray=binarylArray();for(var i=0;i<binArray.length;i++){hexaArray.push(parseInt(binArray[i],2).toString(16).toUpperCase());}return hexaArray;};var hexadecimalNumber=function hexadecimalNumber(){var hexa=\"\";var h=hexadecimalArray();for(var i=0;i<h.length;i++){hexa=hexa.concat(h[i]);}return _toConsumableArray(hexa);};var binarylArrayDouble=function binarylArrayDouble(){var binArray=[];var h=sign()+exponentDouble()+mantissaDouble();for(var i=0;i<16;i++){binArray.push(h.substring(i*4,i*4+4));}return binArray;};var hexadecimalArrayDouble=function hexadecimalArrayDouble(){var hexaArray=[];var binArray=binarylArrayDouble();for(var i=0;i<binArray.length;i++){hexaArray.push(parseInt(binArray[i],2).toString(16).toUpperCase());}return hexaArray;};var hexadecimalNumberDouble=function hexadecimalNumberDouble(){var hexa=\"\";var h=hexadecimalArrayDouble();for(var i=0;i<h.length;i++){hexa=hexa.concat(h[i]);}return hexa;};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"CALCULADORA IEEE754\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"inputs\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"number\",className:\"input-text\",name:\"number\",value:number,onChange:function onChange(e){return setnumber(e.target.value);}}),/*#__PURE__*/_jsx(\"button\",{className:\"button-44\",onClick:convertNumber,children:\" Convertir \"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"conversor\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"conversor-simple\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Presicion simple\"}),/*#__PURE__*/_jsxs(\"h3\",{children:[\"Parte entera en binario: \",'\\n'+integerPart+\" (10)\",\" \"]}),\" \",/*#__PURE__*/_jsx(\"h4\",{children:binaryIntegerPart+\"(2)\"}),/*#__PURE__*/_jsxs(\"h3\",{children:[\"Parte decimal en binario:\",decimalPart+\" (10)\",\" \"]}),/*#__PURE__*/_jsx(\"h4\",{children:binaryDecimalPart.length>=0?binaryDecimalPart.substring(0,30):0+\" (2)\"}),/*#__PURE__*/_jsx(\"h3\",{children:\"Uni\\xF3n de parte entera(2) y parte decimal(2): \"}),/*#__PURE__*/_jsx(\"h4\",{children:binaryDecimalPart.length>=0?binaryIntegerPart+\".\"+binaryDecimalPart.substring(0,30):0}),/*#__PURE__*/_jsx(\"h3\",{children:\"Corrimiento hacia el uno m\\xE1s cercano:\"}),/*#__PURE__*/_jsxs(\"h4\",{children:[\" \",denormalize()]}),/*#__PURE__*/_jsx(\"h3\",{children:\"Exponente en binario: \"}),/*#__PURE__*/_jsx(\"h4\",{children:calculateExponent()}),/*#__PURE__*/_jsx(\"h3\",{children:\"Conversi\\xF3n a presici\\xF3n simple (32 bits): \"}),/*#__PURE__*/_jsx(\"h4\",{children:\"1\"}),/*#__PURE__*/_jsx(\"h3\",{children:\"Signo: \"}),/*#__PURE__*/_jsx(\"h4\",{children:sign()}),/*#__PURE__*/_jsx(\"h3\",{children:\"Exponente: \"}),/*#__PURE__*/_jsx(\"h4\",{children:exponent()}),/*#__PURE__*/_jsx(\"h3\",{children:\"Mantisa:\"}),/*#__PURE__*/_jsxs(\"h4\",{children:[\" \",mantissa()]}),/*#__PURE__*/_jsx(\"hr\",{}),/*#__PURE__*/_jsx(\"h3\",{className:\"title\",children:\"Conversion a presicion Simple 32 Bits\"}),/*#__PURE__*/_jsxs(\"table\",{className:\"customTable\",children:[/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Signo\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Exponente\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Mantiza\"})]}),/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:sign()}),/*#__PURE__*/_jsx(\"td\",{children:exponent()}),/*#__PURE__*/_jsx(\"td\",{children:mantissa()})]})]}),/*#__PURE__*/_jsx(\"h3\",{className:\"title\",children:\"Conversion a de precision simple a hexadecimal\"}),/*#__PURE__*/_jsxs(\"table\",{className:\"customTable\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:binarylArray()[0]}),/*#__PURE__*/_jsx(\"th\",{children:binarylArray()[1]}),/*#__PURE__*/_jsx(\"th\",{children:binarylArray()[2]}),/*#__PURE__*/_jsx(\"th\",{children:binarylArray()[3]}),/*#__PURE__*/_jsx(\"th\",{children:binarylArray()[4]}),/*#__PURE__*/_jsx(\"th\",{children:binarylArray()[5]}),/*#__PURE__*/_jsx(\"th\",{children:binarylArray()[6]}),/*#__PURE__*/_jsx(\"th\",{children:binarylArray()[7]})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:hexadecimalNumber()[0]}),/*#__PURE__*/_jsx(\"td\",{children:hexadecimalNumber()[1]}),/*#__PURE__*/_jsx(\"td\",{children:hexadecimalNumber()[2]}),/*#__PURE__*/_jsx(\"td\",{children:hexadecimalNumber()[3]}),/*#__PURE__*/_jsx(\"td\",{children:hexadecimalNumber()[4]}),/*#__PURE__*/_jsx(\"td\",{children:hexadecimalNumber()[5]}),/*#__PURE__*/_jsx(\"td\",{children:hexadecimalNumber()[6]}),/*#__PURE__*/_jsx(\"td\",{children:hexadecimalNumber()[7]})]})})]}),/*#__PURE__*/_jsx(\"h3\",{children:\"Resultado\"}),/*#__PURE__*/_jsx(\"h3\",{children:hexadecimalNumber()})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"conversor-doble\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Presicion Doble\"}),/*#__PURE__*/_jsxs(\"h3\",{children:[\"Parte entera en binario: \",'\\n'+integerPart+\" (10)\",\" \"]}),\" \",/*#__PURE__*/_jsx(\"h4\",{children:binaryIntegerPart+\" (2)\"}),/*#__PURE__*/_jsxs(\"h3\",{children:[\"Parte decimal en binario:\",decimalPart+\" (10)\",\" \"]}),/*#__PURE__*/_jsx(\"h4\",{children:binaryDecimalPart.length>=0?binaryDecimalPart.substring(0,30):0+\" (2)\"}),/*#__PURE__*/_jsx(\"h3\",{children:\"Uni\\xF3n de parte entera(2) y parte decimal(2): \"}),/*#__PURE__*/_jsx(\"h4\",{children:binaryDecimalPart.length>=0?binaryIntegerPart+\".\"+binaryDecimalPart.substring(0,30):0}),/*#__PURE__*/_jsx(\"h3\",{children:\"Corrimiento hacia el uno m\\xE1s cercano:\"}),/*#__PURE__*/_jsxs(\"h4\",{children:[\" \",denormalize()]}),/*#__PURE__*/_jsx(\"h3\",{children:\"Exponente en binario: \"}),/*#__PURE__*/_jsx(\"h4\",{children:calculateExponentDouble()}),/*#__PURE__*/_jsx(\"h3\",{children:\"Conversi\\xF3n a presici\\xF3n simple (32 bits): \"}),/*#__PURE__*/_jsx(\"h4\",{children:\"1\"}),/*#__PURE__*/_jsx(\"h3\",{children:\"Signo: \"}),/*#__PURE__*/_jsx(\"h4\",{children:sign()}),/*#__PURE__*/_jsx(\"h3\",{children:\"Exponente: \"}),/*#__PURE__*/_jsx(\"h4\",{children:exponentDouble()}),/*#__PURE__*/_jsx(\"h3\",{children:\"Mantisa:\"}),/*#__PURE__*/_jsxs(\"h4\",{children:[\" \",mantissaDouble()]}),/*#__PURE__*/_jsx(\"hr\",{}),/*#__PURE__*/_jsx(\"h3\",{className:\"title\",children:\"Conversion a presicion doble 64 Bits\"}),/*#__PURE__*/_jsxs(\"table\",{className:\"customTable\",children:[/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Signo\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Exponente\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Mantiza\"})]}),/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:sign()}),/*#__PURE__*/_jsx(\"td\",{children:exponentDouble()}),/*#__PURE__*/_jsx(\"td\",{children:mantissaDouble()})]})]}),/*#__PURE__*/_jsx(\"h3\",{className:\"title\",children:\"Conversion a de precision simple a hexadecimal\"}),/*#__PURE__*/_jsxs(\"table\",{className:\"customTable\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:binarylArrayDouble()[0]}),/*#__PURE__*/_jsx(\"th\",{children:binarylArrayDouble()[1]}),/*#__PURE__*/_jsx(\"th\",{children:binarylArrayDouble()[2]}),/*#__PURE__*/_jsx(\"th\",{children:binarylArrayDouble()[3]}),/*#__PURE__*/_jsx(\"th\",{children:binarylArrayDouble()[4]}),/*#__PURE__*/_jsx(\"th\",{children:binarylArrayDouble()[5]}),/*#__PURE__*/_jsx(\"th\",{children:binarylArrayDouble()[6]}),/*#__PURE__*/_jsx(\"th\",{children:binarylArrayDouble()[7]}),/*#__PURE__*/_jsx(\"th\",{children:binarylArrayDouble()[9]}),/*#__PURE__*/_jsx(\"th\",{children:binarylArrayDouble()[10]}),/*#__PURE__*/_jsx(\"th\",{children:binarylArrayDouble()[11]}),/*#__PURE__*/_jsx(\"th\",{children:binarylArrayDouble()[12]}),/*#__PURE__*/_jsx(\"th\",{children:binarylArrayDouble()[13]}),/*#__PURE__*/_jsx(\"th\",{children:binarylArrayDouble()[14]}),/*#__PURE__*/_jsx(\"th\",{children:binarylArrayDouble()[15]})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:hexadecimalArrayDouble()[0]}),/*#__PURE__*/_jsx(\"td\",{children:hexadecimalArrayDouble()[1]}),/*#__PURE__*/_jsx(\"td\",{children:hexadecimalArrayDouble()[2]}),/*#__PURE__*/_jsx(\"td\",{children:hexadecimalArrayDouble()[3]}),/*#__PURE__*/_jsx(\"td\",{children:hexadecimalArrayDouble()[4]}),/*#__PURE__*/_jsx(\"td\",{children:hexadecimalArrayDouble()[5]}),/*#__PURE__*/_jsx(\"td\",{children:hexadecimalArrayDouble()[6]}),/*#__PURE__*/_jsx(\"td\",{children:hexadecimalArrayDouble()[8]}),/*#__PURE__*/_jsx(\"td\",{children:hexadecimalArrayDouble()[9]}),/*#__PURE__*/_jsx(\"td\",{children:hexadecimalArrayDouble()[10]}),/*#__PURE__*/_jsx(\"td\",{children:hexadecimalArrayDouble()[11]}),/*#__PURE__*/_jsx(\"td\",{children:hexadecimalArrayDouble()[12]}),/*#__PURE__*/_jsx(\"td\",{children:hexadecimalArrayDouble()[13]}),/*#__PURE__*/_jsx(\"td\",{children:hexadecimalArrayDouble()[14]}),/*#__PURE__*/_jsx(\"td\",{children:hexadecimalArrayDouble()[15]})]})})]}),/*#__PURE__*/_jsx(\"h3\",{children:\"Resultado\"}),/*#__PURE__*/_jsx(\"h3\",{children:hexadecimalNumberDouble()})]})]})]});};","map":{"version":3,"names":["React","useContext","useState","SimpleAndDoublePrecision","number","setnumber","binaryNumber","Math","abs","toString","integerPart","setintegerPart","decimalPart","setdecimalPart","binaryIntegerPart","setbinaryIntegerPart","binaryDecimalPart","setbinaryDecimalPart","convertNumber","split","integerPartSplit","decimalPartSplit","binaryIntegerPartSplit","binaryDecimalPartSplit","positions","count","binArray","i","denormalize","corrimiento","index","a","replace","slice","substring","denormalizeDouble","calculateExponent","exp","indexOf","calculateExponentDouble","exponentDouble","ceros","length","concat","exponent","sign","s","mantissaDouble","denormalized","m","difference","mantissa","binarylArray","h","push","hexadecimalArray","hexaArray","parseInt","toUpperCase","hexadecimalNumber","hexa","binarylArrayDouble","hexadecimalArrayDouble","hexadecimalNumberDouble","e","target","value"],"sources":["C:/Users/NICK0/OneDrive/Escritorio/Universidad/Semestre 10/IEEE-754-Despliegue/src/componets/SimpleAndDoublePrecision .jsx"],"sourcesContent":["import React, { useContext, useState } from 'react'\r\nimport './SimpleAndDoublePrecision.css'\r\nexport const SimpleAndDoublePrecision  = () => {\r\n    const [number, setnumber] = useState(0)\r\n    const binaryNumber = Math.abs(number).toString(2);\r\n    const [integerPart, setintegerPart] = useState(0)\r\n    const [decimalPart, setdecimalPart] = useState(0)\r\n    const [binaryIntegerPart, setbinaryIntegerPart] = useState(1)\r\n    const [binaryDecimalPart, setbinaryDecimalPart] = useState(1)\r\n\r\n    const convertNumber=()=>{\r\n        const [integerPartSplit, decimalPartSplit] =  Math.abs(number).toString().split(\".\")\r\n        const [binaryIntegerPartSplit, binaryDecimalPartSplit] = binaryNumber.split(\".\");\r\n        setintegerPart(integerPartSplit)\r\n        setdecimalPart(decimalPartSplit)\r\n        setbinaryIntegerPart(binaryIntegerPartSplit)\r\n        setbinaryDecimalPart(binaryDecimalPartSplit)\r\n    }\r\n\r\n    const positions = () => {\r\n        let count = 0;\r\n        let binArray = binaryDecimalPart.toString().split('');\r\n        for(let i = 0; binArray[i] === \"0\";i++){\r\n            count++;\r\n        }\r\n        return count+1;\r\n    }\r\n\r\n    const  denormalize=()=>{\r\n        let corrimiento;\r\n        if(integerPart ===\"0\"){\r\n            let index = positions();\r\n            let a = binaryNumber.replace(\".\",\"\");\r\n            corrimiento = a.slice(index, index+1) + \".\" + a.slice(index+1)\r\n        }\r\n        else{\r\n            let a = binaryNumber.replace(\".\",\"\");\r\n            corrimiento = a.slice(0,1) + \".\" + a.slice(1)\r\n        }\r\n        \r\n        return corrimiento.substring(0,30);\r\n    }\r\n\r\n    const  denormalizeDouble=()=>{\r\n        let corrimiento;\r\n        if(integerPart ===\"0\"){\r\n            let index = positions();\r\n            let a = binaryNumber.replace(\".\",\"\");\r\n            corrimiento = a.slice(index, index+1) + \".\" + a.slice(index+1)\r\n        }\r\n        else{\r\n            let a = binaryNumber.replace(\".\",\"\");\r\n            corrimiento = a.slice(0,1) + \".\" + a.slice(1)\r\n        }\r\n        \r\n        return corrimiento.substring(0,60);\r\n    }\r\n\r\n    const calculateExponent =()=>{\r\n        let exp;\r\n        if(integerPart === \"0\"){\r\n            let index = positions();\r\n            exp = \"127 - \"+ index + \" = \" + (127 - index) + \" (10) --> \"+ (127 - index).toString(2) + \" (2)\";\r\n        }\r\n        else{\r\n            let index = binaryNumber.indexOf(\".\");\r\n            exp = \"127 + \"+ (index-1) + \" = \" + (127 + (index - 1)) + \" (10) --> \"+ (127 + (index - 1)).toString(2) ;\r\n        }\r\n        return exp;\r\n    }\r\n    const calculateExponentDouble =()=>{\r\n        let exp;\r\n        if(integerPart == \"0\"){\r\n            let index = positions();\r\n            exp = \"1023 - \"+ index + \" = \" + (1023 - index) + \" (10) --> \"+ (1023 - index).toString(2) + \" (2)\";\r\n        }\r\n        else{\r\n            let index = binaryNumber.indexOf(\".\");\r\n            exp = \"1023 + \"+ (index-1) + \" = \" + (1023 + (index - 1)) + \" (10) --> \"+ (1023 + (index - 1)).toString(2) + \" (2)\";\r\n        }\r\n        return exp;\r\n    }\r\n    const  exponentDouble = ()=>{\r\n        let exp;\r\n        if(integerPart == \"0\"){\r\n            let index = positions()\r\n            exp = (1023 - index).toString(2);\r\n        }else{\r\n            let index = binaryNumber.indexOf(\".\");\r\n            exp = (1023 + (index - 1)).toString(2);\r\n        }\r\n\r\n        let ceros = \"\";\r\n        if(exp.length < 11){\r\n            for(let i = 0; i < (11 - exp.length); i++){\r\n                ceros = ceros.concat(\"0\");\r\n            }\r\n            exp = ceros.concat(exp);\r\n        }\r\n        \r\n        return exp;\r\n    }\r\n\r\n    const  exponent = ()=>{\r\n        let exp;\r\n        if(integerPart === \"0\"){\r\n            let index = positions()\r\n            exp = (127 - index).toString(2);\r\n        }else{\r\n            let index = binaryNumber.indexOf(\".\");\r\n            exp = (127 + (index - 1)).toString(2);\r\n        }\r\n\r\n        let ceros = \"\";\r\n        if(exp.length < 8){\r\n            for(let i = 0; i < (8 - exp.length); i++){\r\n                ceros = ceros.concat(\"0\");\r\n            }\r\n            exp = ceros.concat(exp);\r\n        }\r\n        \r\n        return exp;\r\n    }\r\n\r\n    const sign= ()=>{\r\n        let s;\r\n        number >= 0 ? s = 0 : s = 1;\r\n        return s;\r\n   }\r\n   const mantissaDouble = () => {\r\n    let denormalized = denormalizeDouble();\r\n    let m = denormalized.slice(2);\r\n    let difference = (52 - (m.length));\r\n    if(m.length < 52){\r\n        for(let i = 0; i < difference; i++){\r\n            m+=\"0\";\r\n        }\r\n    }\r\n\r\n    if(m.length > 52){\r\n        m = m.substring(0,52)\r\n    }\r\n    return m;\r\n}\r\n\r\n   const mantissa = () => {\r\n    let denormalized = denormalize();\r\n    let m = denormalized.slice(2);\r\n    let difference = (23 - (m.length));\r\n    if(m.length < 23){\r\n        for(let i = 0; i < difference; i++){\r\n            m+=\"0\";\r\n        }\r\n    }\r\n\r\n    if(m.length > 23){\r\n        m = m.substring(0,23)\r\n    }\r\n    return m;\r\n}   \r\nconst binarylArray = () => {\r\n    let binArray = [];\r\n    let h = sign() + exponent() + mantissa();\r\n    for(let i = 0; i < 8; i++){\r\n        binArray.push(h.substring(i*4, (i*4) + 4))\r\n    }\r\n    return binArray;\r\n}\r\n\r\nconst hexadecimalArray = () =>{\r\n    let hexaArray = [];\r\n    let binArray = binarylArray();\r\n    for(let i = 0; i < binArray.length; i++){\r\n        hexaArray.push(parseInt(binArray[i], 2).toString(16).toUpperCase())\r\n    }\r\n    return hexaArray;\r\n}\r\n\r\nconst hexadecimalNumber = () => {\r\n    let hexa = \"\";\r\n    let h = hexadecimalArray();\r\n    for(let i = 0; i < h.length; i++){\r\n        hexa = hexa.concat(h[i])\r\n    }\r\n\r\n    return [...hexa];\r\n    }\r\n\r\n    const binarylArrayDouble = () => {\r\n        let binArray = [];\r\n        let h = sign() + exponentDouble() + mantissaDouble();\r\n        for(let i = 0; i < 16; i++){\r\n            binArray.push(h.substring(i*4, (i*4) + 4))\r\n        }\r\n        return binArray;\r\n    }\r\n    \r\n    const hexadecimalArrayDouble = () =>{\r\n        let hexaArray = [];\r\n        let binArray = binarylArrayDouble();\r\n        for(let i = 0; i < binArray.length; i++){\r\n            hexaArray.push(parseInt(binArray[i], 2).toString(16).toUpperCase())\r\n        }\r\n        return hexaArray;\r\n    }\r\n    \r\n    const hexadecimalNumberDouble = () => {\r\n        let hexa = \"\";\r\n        let h = hexadecimalArrayDouble();\r\n        for(let i = 0; i < h.length; i++){\r\n            hexa = hexa.concat(h[i])\r\n        }\r\n        return hexa;\r\n    }\r\n\r\n  return (\r\n    <>\r\n    <h1>CALCULADORA IEEE754</h1>\r\n    <div className='inputs'>\r\n        <input type='number' className='input-text' name='number' value={number} onChange={e => setnumber(e.target.value)}></input>\r\n        <button className='button-44' onClick={convertNumber}> Convertir </button>\r\n    </div>\r\n    <div className='conversor'>\r\n        <div className='conversor-simple'>\r\n            <h2>Presicion simple</h2>\r\n\r\n            <h3>Parte entera en binario: {'\\n' + integerPart + \" (10)\"} </h3> <h4>{binaryIntegerPart + \"(2)\"}</h4>\r\n\r\n            <h3>Parte decimal en binario:{decimalPart + \" (10)\"} </h3>\r\n            <h4>{binaryDecimalPart.length >= 0 ? binaryDecimalPart.substring(0, 30) : 0 + \" (2)\"}</h4>\r\n            <h3>Unión de parte entera(2) y parte decimal(2): </h3>\r\n            <h4>{binaryDecimalPart.length >= 0 ? binaryIntegerPart + \".\" + binaryDecimalPart.substring(0, 30) : 0}</h4>\r\n            <h3>Corrimiento hacia el uno más cercano:</h3>\r\n            <h4> {denormalize()}</h4>\r\n            <h3>Exponente en binario: </h3>\r\n            <h4>{calculateExponent()}</h4>\r\n            <h3>Conversión a presición simple (32 bits): </h3>\r\n            <h4>1</h4>\r\n            <h3>Signo: </h3>\r\n            <h4>{sign()}</h4>\r\n            <h3>Exponente: </h3>\r\n            <h4>{exponent()}</h4>\r\n            <h3>Mantisa:</h3>\r\n            <h4> {mantissa()}</h4>\r\n            <hr />\r\n            <h3 className='title'>Conversion a presicion Simple 32 Bits</h3>\r\n            <table className='customTable'>\r\n                <tr>\r\n                    <th>Signo</th>\r\n                    <th>Exponente</th>\r\n                    <th>Mantiza</th>\r\n                </tr>\r\n                <tr>\r\n                    <td>{sign()}</td>\r\n                    <td>{exponent()}</td>\r\n                    <td>{mantissa()}</td>\r\n                </tr>\r\n            </table>\r\n            <h3 className='title'>Conversion a de precision simple a hexadecimal</h3>\r\n            <table className='customTable'>\r\n                <thead>\r\n\r\n                <tr>\r\n                    <th>{binarylArray()[0]}</th>\r\n                    <th>{binarylArray()[1]}</th>\r\n                    <th>{binarylArray()[2]}</th>\r\n                    <th>{binarylArray()[3]}</th>\r\n                    <th>{binarylArray()[4]}</th>\r\n                    <th>{binarylArray()[5]}</th>\r\n                    <th>{binarylArray()[6]}</th>\r\n                    <th>{binarylArray()[7]}</th>\r\n\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n\r\n                <tr>\r\n                    <td>{hexadecimalNumber()[0]}</td>\r\n                    <td>{hexadecimalNumber()[1]}</td>\r\n                    <td>{hexadecimalNumber()[2]}</td>\r\n                    <td>{hexadecimalNumber()[3]}</td>\r\n                    <td>{hexadecimalNumber()[4]}</td>\r\n                    <td>{hexadecimalNumber()[5]}</td>\r\n                    <td>{hexadecimalNumber()[6]}</td>\r\n                    <td>{hexadecimalNumber()[7]}</td>\r\n\r\n                </tr>\r\n                </tbody>\r\n            </table>\r\n            <h3>Resultado</h3>\r\n            <h3>{hexadecimalNumber()}</h3>\r\n\r\n\r\n\r\n                </div>\r\n                <div className='conversor-doble'>\r\n                    <h2>Presicion Doble</h2>\r\n\r\n                    <h3>Parte entera en binario: {'\\n' + integerPart + \" (10)\"} </h3> <h4>{binaryIntegerPart + \" (2)\"}</h4>\r\n\r\n                    <h3>Parte decimal en binario:{decimalPart + \" (10)\"} </h3>\r\n                    <h4>{binaryDecimalPart.length >= 0 ? binaryDecimalPart.substring(0, 30) : 0 + \" (2)\"}</h4>\r\n                    <h3>Unión de parte entera(2) y parte decimal(2): </h3>\r\n                    <h4>{binaryDecimalPart.length >= 0 ? binaryIntegerPart + \".\" + binaryDecimalPart.substring(0, 30) : 0}</h4>\r\n                    <h3>Corrimiento hacia el uno más cercano:</h3>\r\n                    <h4> {denormalize()}</h4>\r\n                    <h3>Exponente en binario: </h3>\r\n                    <h4>{calculateExponentDouble()}</h4>\r\n                    <h3>Conversión a presición simple (32 bits): </h3>\r\n                    <h4>1</h4>\r\n                    <h3>Signo: </h3>\r\n                    <h4>{sign()}</h4>\r\n                    <h3>Exponente: </h3>\r\n                    <h4>{exponentDouble()}</h4>\r\n                    <h3>Mantisa:</h3>\r\n                    <h4> {mantissaDouble()}</h4>\r\n                    <hr />\r\n                    <h3 className='title'>Conversion a presicion doble 64 Bits</h3>\r\n                    <table className='customTable'>\r\n                        <tr>\r\n                            <th>Signo</th>\r\n                            <th>Exponente</th>\r\n                            <th>Mantiza</th>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>{sign()}</td>\r\n                            <td>{exponentDouble()}</td>\r\n                            <td>{mantissaDouble()}</td>\r\n                        </tr>\r\n                    </table>\r\n                    <h3 className='title'>Conversion a de precision simple a hexadecimal</h3>\r\n                    <table className='customTable'>\r\n                <thead>\r\n\r\n                <tr>\r\n                    <th>{binarylArrayDouble()[0]}</th>\r\n                    <th>{binarylArrayDouble()[1]}</th>\r\n                    <th>{binarylArrayDouble()[2]}</th>\r\n                    <th>{binarylArrayDouble()[3]}</th>\r\n                    <th>{binarylArrayDouble()[4]}</th>\r\n                    <th>{binarylArrayDouble()[5]}</th>\r\n                    <th>{binarylArrayDouble()[6]}</th>\r\n                    <th>{binarylArrayDouble()[7]}</th>\r\n                    <th>{binarylArrayDouble()[9]}</th>\r\n                    <th>{binarylArrayDouble()[10]}</th>\r\n                    <th>{binarylArrayDouble()[11]}</th>\r\n                    <th>{binarylArrayDouble()[12]}</th>\r\n                    <th>{binarylArrayDouble()[13]}</th>\r\n                    <th>{binarylArrayDouble()[14]}</th>\r\n                    <th>{binarylArrayDouble()[15]}</th>\r\n               \r\n\r\n\r\n\r\n\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n\r\n                <tr>\r\n                    <td>{hexadecimalArrayDouble()[0]}</td>\r\n                    <td>{hexadecimalArrayDouble()[1]}</td>\r\n                    <td>{hexadecimalArrayDouble()[2]}</td>\r\n                    <td>{hexadecimalArrayDouble()[3]}</td>\r\n                    <td>{hexadecimalArrayDouble()[4]}</td>\r\n                    <td>{hexadecimalArrayDouble()[5]}</td>\r\n                    <td>{hexadecimalArrayDouble()[6]}</td>\r\n                    <td>{hexadecimalArrayDouble()[8]}</td>\r\n                    <td>{hexadecimalArrayDouble()[9]}</td>\r\n                    <td>{hexadecimalArrayDouble()[10]}</td>\r\n                    <td>{hexadecimalArrayDouble()[11]}</td>\r\n                    <td>{hexadecimalArrayDouble()[12]}</td>\r\n                    <td>{hexadecimalArrayDouble()[13]}</td>\r\n                    <td>{hexadecimalArrayDouble()[14]}</td>\r\n                    <td>{hexadecimalArrayDouble()[15]}</td>\r\n\r\n\r\n\r\n                </tr>\r\n                </tbody>\r\n            </table>\r\n            <h3>Resultado</h3>\r\n            <h3>{hexadecimalNumberDouble()}</h3>\r\n\r\n\r\n\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}